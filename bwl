#!/bin/bash
BWL_BASE="$HOME/.bwl"
BWL_CONFIG="$BWL_BASE/config"
BWL_SESSION_FILE="$BWL_BASE/session"

usage() {
    echo "bwl: login to Bitwarden, encrypt and persist session tokens"
    echo
    echo "Usage: bwl [--help] [--login] [--logout] [--encrypt-method]"
    echo
    echo "To export environment variables, use: \`eval \$(bwl)\`"
    echo
    echo "Options:"
    echo -e "\t-h  --help"
    echo -e "\t-l  --logout bw logout"
    echo -e "\t-e  --encrypt-method [gpg|keybase|none] (defaults to none)"
    echo -e "\t-r  --gpg-recipient <email> (conditional if using gpg encrypt-method)"
    echo -e "\t-d  --debug includes debug information to stdout"
    echo
    echo "You can optionally use ~/.bwl/config to store:"
    echo -e "\nBW_CLIENTID=<client_id>\nBW_CLIENTSECRET=<secret>\nBWL_ENCRYPT_METHOD=<gpg|keybase|none>\nGPG_RECIPIENT=<gpg-email>"
    echo
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    -h | --help)
        usage
        exit
        ;;
    -l | --logout)
        LOGOUT=true
        ;;
    -e | --encrypt-method)
        BWL_ENCRYPT_METHOD=$2
        shift
        ;;
    -r | --gpg-recipient)
        GPG_RECIPIENT=$2
        shift
        ;;
    -d | --debug)
        DEBUG=true
        ;;
    *)
        echo "ERROR: unknown parameter \"$PARAM\""
        usage
        exit 1
        ;;
    esac
    shift
done

# Validate both bitwarden (bw) & jq
command -v jq >/dev/null 2>&1 || { echo >&2 "jq could not be found."; exit 1; }
command -v bw >/dev/null 2>&1 || { echo >&2 "bw could not be found."; exit 1; }

function log_debug() {
    if [ "$DEBUG" = true ]; then
        echo "DEBUG $*"
    fi
}

function bitwardenLoginAndUnlock() {
    function bwLogin() {
        function checkLogin() {
            if [ "$1" -ne 0 ]; then bwLogin; fi
        }
        log_debug "Logging into bw"
        if [[ "$bw_login_apikey" == true ]]; then
            bw login --apikey --raw
            checkLogin "$?"
        else
            # This approach already returns a session key
            BW_SESSION="$(bw login --raw)"
            checkLogin "$?"
            export BW_SESSION
        fi
    }

    function bwUnlock() {
        log_debug "Unlocking bw"
        local status
        status="$(bw status 2>/dev/null | jq '.status')"
        if [ "$status" == \"unauthenticated\" ]; then
            log_debug "bw is unauthenticated, logging in"
            bwLogin
        elif [ "$status" == \"locked\" ]; then 
            log_debug "bw is locked"
            if ! checkEncryptedBitwardenSession; then
                log_debug "bw unlock"
                if ! BW_SESSION="$(bw unlock --raw)"; then
                    (echo >&2 "ERROR: Invalid login.")
                    exit 1
                fi
                export BW_SESSION
                encryptBWSession
            fi
        elif [ "$status" == \"unlocked\" ]; then
            log_debug "bw is unlocked"
            if [ -n "$BW_SESSION" ]; then
                checkEncryptedBitwardenSession
            fi
        fi
    }

    # Check for encrypted session token (in case already unlocked in another terminal session)
    function checkEncryptedBitwardenSession() {
        log_debug "Checking for existing bw session"
        if [ -n "$BW_SESSION" ]; then
            log_debug "Found new bw session, encrypting with encrypt-method:$BWL_ENCRYPT_METHOD"
            encryptBWSession
        elif [ -s "$BWL_SESSION_FILE" ]; then
            log_debug "Found existing bw session from '$BWL_SESSION_FILE', encrypt-method:$BWL_ENCRYPT_METHOD"
            decryptBWSession
        else
            log_debug "No existing bw session found." && return 1
        fi
    }

    # Check if "unauthenticated" (in case of logout)
    if ! bw login --check &>/dev/null; then
        log_debug "bw is unauthenticated, ensuring proper logout and invalidating existing sessions"
        # Ensure proper logout since any existing sessions are invalidated
        bitwardenLogout
        bwLogin
    fi

    bwUnlock
}

function bitwardenLogout() {
    unset BW_SESSION
    rm "$BWL_SESSION_FILE" 2>/dev/null
    bw logout 2>/dev/null
}

function encryptBWSession() {
    rm "$BWL_SESSION_FILE" &>/dev/null
    if [ "$BWL_ENCRYPT_METHOD" == "gpg" ]; then
        echo "$BW_SESSION" | gpg -e -a -r "$GPG_RECIPIENT" -o "$BWL_SESSION_FILE"
        log_debug "encrypted bw session (rc:$?)"
    elif [ "$BWL_ENCRYPT_METHOD" == "keybase" ]; then
        keybase pgp encrypt -m "$BW_SESSION" -o "$BWL_SESSION_FILE"
        log_debug "encrypted bw session (rc:$?)"
    else
        mkdir -p "$BWL_BASE"
        echo "$BW_SESSION" > "$BWL_SESSION_FILE"
    fi
    exportBWSession
}

function decryptBWSession() {
    local session_key

    function checkResponse() {
        if [[ $1 -ne 0 || -z "$session_key" ]]; then
            restartLogin "Invalid session key retrieved"
        fi
    }

    if [ "$BWL_ENCRYPT_METHOD" == "gpg" ]; then
        log_debug "decrypting gpg secret and exporting BW_SESSION"
        session_key="$(gpg -d "$BWL_SESSION_FILE" 2>/dev/null)"
        checkResponse $?
    elif [ "$BWL_ENCRYPT_METHOD" == "keybase" ]; then
        log_debug "decrypting keybase secret and exporting BW_SESSION"
        session_key="$(keybase pgp decrypt -i "$BWL_SESSION_FILE")"
        checkResponse $?
    else
        log_debug "exporting BW_SESSION"
        session_key="$(cat "$BWL_SESSION_FILE")"
        checkResponse $?
    fi

    # Validate decrypted session key
    export BW_SESSION="$session_key"
    if [ "$(bw status 2>/dev/null | jq '.status')" != \"unlocked\" ]; then
        restartLogin "Invalid decrypted session key"
    fi

    echo export BW_SESSION="$session_key"
}

function restartLogin() {
    log_debug "WARNING: $1, restart login"
    rm -f "$BWL_SESSION_FILE" &>/dev/null
    bitwardenLoginAndUnlock
}

function exportBWSession() {
    log_debug "Exporting bw session"
    echo export BW_SESSION="$BW_SESSION"
    exit 0
}

function localEnvironment() {
    if [[ -f "$BWL_CONFIG" ]]; then
        log_debug "Reading from '$BWL_CONFIG'"
        set -o allexport
        # shellcheck disable=SC1090
        source "$BWL_CONFIG"
        set +o allexport
    fi

    bw_login_apikey=false
    if [[ -n "$BW_CLIENTID" && -n "$BW_CLIENTSECRET" ]]; then
        log_debug "Detected bw api key credentials"
        bw_login_apikey=true
    fi

    if [ -z "$BWL_ENCRYPT_METHOD" ]; then
        BWL_ENCRYPT_METHOD="none"
    elif [ "$BWL_ENCRYPT_METHOD" == "gpg" ]; then
        if [ -z "$GPG_RECIPIENT" ]; then
            (echo >&2 "ERROR: BWL_ENCRYPT_METHOD is set to 'gpg', yet missing a GPG_RECIPIENT: '$GPG_RECIPIENT'")
            exit 1
        fi
    fi
}

if [ "$LOGOUT" = true ]; then
    bitwardenLogout
    exit $?
fi

localEnvironment
bitwardenLoginAndUnlock
